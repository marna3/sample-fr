version: 2.1

# define the parameters from the setup config.
parameters:
  always-continue:
    type: boolean
    default: false
  pipeline-samplelib1:
    type: boolean
    default: false
  pipeline-service1:
    type: boolean
    default: false
  pipeline-service2:
    type: boolean
    default: false

executors:
  bookworm:
    docker:
      - image: ${DEVELOPMENT_TOOL_GCP_REGION}-docker.pkg.dev/${DEVELOPMENT_TOOL_GCP_PROJECT}/${DEVELOPMENT_TOOL_BASE_AR_REPO_NAME}/node:20-bookworm-slim
        auth:
          username: _json_key
          password: ${DEVELOPMENT_TOOL_GSA_KEY}
  google-cloud-cli:
    docker:
      - image: gcr.io/google.com/cloudsdktool/google-cloud-cli:slim

commands:

  yarn_repo_setting:
    steps:
      - run:
          name: Pont yarn to Artifact Registry npm Repository
          command: |
            yarn config set registry "https://${DEVELOPMENT_TOOL_GCP_REGION}-npm.pkg.dev/${DEVELOPMENT_TOOL_GCP_PROJECT}/${DEVELOPMENT_TOOL_ARTIFACT_REGISTRY_JS_REPO_NAME}"
  yarn_repo_auth_setting:
    steps:
      - run:
          name: Set Authentication for Artifact Registry npm Repository
          command: |
            cp ./.npmrc.template ./.npmrc
            sed -i "s/<GCP_REGION>/${DEVELOPMENT_TOOL_GCP_REGION}/g" ./.npmrc
            sed -i "s/<GCP_PROJECT>/${DEVELOPMENT_TOOL_GCP_PROJECT}/g" ./.npmrc
            sed -i "s/<ARTIFACT_REGISTRY_JS_REPO_NAME>/${DEVELOPMENT_TOOL_ARTIFACT_REGISTRY_JS_REPO_NAME}/g" ./.npmrc
            sed -i "s/<ARTIFACT_REGISTRY_JS_KEY>/${DEVELOPMENT_TOOL_ARTIFACT_REGISTRY_JS_KEY}/g" ./.npmrc

  yarn_install:
    steps:
      - run:
          name: Run install
          command: NPM_CONFIG_USERCONFIG=./.npmrc yarn install

  code_check:
    steps:
      - run:
          name: Run ESLint
          command: NPM_CONFIG_USERCONFIG=./.npmrc yarn lint
      - run:
          name: Run Prettier
          command: NPM_CONFIG_USERCONFIG=./.npmrc yarn format
  
  yarn_test:
    steps:
      # CI=true（オプション）：全てのテストを実行する
      - run:
          name: Run tests
          command: CI=true NPM_CONFIG_USERCONFIG=./.npmrc yarn test

  gcloud_setting:
    steps:
      - run:
          name: Authorize Google Cloud for Image Push and Deploy
          command: |
            echo ${SERVICE_GSA_KEY} | gcloud auth activate-service-account --key-file=-
            gcloud auth list
            gcloud config list

  existing_image_check:
    steps:
      # 対象のイメージタグが既にArtifact Registryに保存されているかを確認する
      - run:
          name: Check Image Existence in Artifact Registry
          command: |
            if gcloud artifacts docker images list ${SERVICE_GCP_REGION}-docker.pkg.dev/${SERVICE_GCP_PROJECT}/${SERVICE_AR_REPO_NAME}/${SERVICE_NAME} --include-tags --filter="tags:${IMAGE_TAG}" | grep "${IMAGE_TAG}"; then
              echo "Image: ${IMAGE_TAG} already exists in Artifact Registry. Stop the Workflow."
              exit 1
            else
              echo "Image: ${IMAGE_TAG} does not exist in Artifact Registry. Proceeding with the Workflow."
            fi

  image_tag_setting:
    steps:
      - run:
          name: Install jq Command
          command: |
            apt install -y jq
      - run:
          name: Set Image Tag
          command: |
            IMAGE_TAG=$(jq -r '.version' ./package.json)
            echo "export IMAGE_TAG=${IMAGE_TAG}" >> $BASH_ENV

  image_build:
    steps:
      - run:
          name: Configure Authentication for Artifact Registry Base Repository
          command: gcloud auth configure-docker ${DEVELOPMENT_TOOL_GCP_REGION}-docker.pkg.dev --quiet
      - run:
          name: Image Build
          command: |
            echo "Image Tag: ${IMAGE_TAG}"
            docker build \
              --build-arg GCP_REGION=${DEVELOPMENT_TOOL_GCP_REGION} \
              --build-arg GCP_PROJECT=${DEVELOPMENT_TOOL_GCP_PROJECT} \
              --build-arg BASE_AR_REPO_NAME=${DEVELOPMENT_TOOL_BASE_AR_REPO_NAME} \
              --build-arg ARTIFACT_REGISTRY_JS_REPO_NAME=${DEVELOPMENT_TOOL_ARTIFACT_REGISTRY_JS_REPO_NAME} \
              --build-arg APP_ENV=${APP_ENV} \
              -t ${SERVICE_GCP_REGION}-docker.pkg.dev/${SERVICE_GCP_PROJECT}/${SERVICE_AR_REPO_NAME}/${SERVICE_NAME}:${IMAGE_TAG} \
              -f ./Dockerfile \
              .
  image_push:
    steps:
      - run:
          name: Configure Authentication for Artifact Registry Service Repository
          command: gcloud auth configure-docker ${SERVICE_GCP_REGION}-docker.pkg.dev --quiet
      - run:
          name: Image Push
          command: |
            docker push ${SERVICE_GCP_REGION}-docker.pkg.dev/${SERVICE_GCP_PROJECT}/${SERVICE_AR_REPO_NAME}/${SERVICE_NAME}:${IMAGE_TAG}
  deploy:
    steps:
      - run:
          name: Set Configuration of Cloud Run Service
          command: |
            sed -i "s/<SERVICE_NAME>/${SERVICE_NAME}/g" ./deploy/service.yml
            sed -i "s/<SERVICE_GCP_REGION>/${SERVICE_GCP_REGION}/g" ./deploy/service.yml
            sed -i "s/<SERVICE_GCP_PROJECT>/${SERVICE_GCP_PROJECT}/g" ./deploy/service.yml
            sed -i "s/<SERVICE_AR_REPO_NAME>/${SERVICE_AR_REPO_NAME}/g" ./deploy/service.yml
            sed -i "s/<IMAGE_TAG>/${IMAGE_TAG}/g" ./deploy/service.yml
            cat ./deploy/service.yml
      - run:
          name: Deploy to Cloud Run
          command: |
            gcloud run services replace ./deploy/service.yml \
              --project=${SERVICE_GCP_PROJECT} \
              --region=${SERVICE_GCP_REGION} \
              --quiet
      - run:
          name: Allow Access to Cloud Run Service
          command: |
            gcloud run services set-iam-policy ${SERVICE_NAME} ./deploy/policy.yml \
              --project=${SERVICE_GCP_PROJECT} \
              --region=${SERVICE_GCP_REGION} \
              --quiet
